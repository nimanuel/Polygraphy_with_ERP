clear; close all; clc;

all_channels = [1,2,3,4,5,6,7,8,9,10,11,12];
channels_close_to_muse = [1,2,9,11];

dt = 0.002;

%% --------- LYING ------------ %

% Specify the directory path
directory = 'lying/';

signals_by_catagory = struct;
signals_by_electrode = cell(1, length(all_channels));
initial_sum_of_signals = zeros(1.6/dt);

% for key = ["probe", "target", "irrelevant"]
key = "irrelevant";
for i = all_channels
    % Recursively iterate over files in the directory and subdirectories
    [sum_sig, file_counter] = processFilesToSignals(directory, key, [i], 1.6, dt, 0, initial_sum_of_signals); 
    signal = sum_sig / file_counter;        
    signals_by_electrode{i} = signal;
end
signals_by_catagory.(key) = signals_by_electrode; 


save("lying", "signals_by_catagory");
%% Renormalization:

sum = initial_sum_of_signals;
for i = all_channels    
    sig = signals_by_electrode{i};
    sum = sum + sig;
end
mean = sum/length(all_channels);
for i = all_channels    
    sig = signals_by_electrode{1, end+1};
    sig = sig - mean;
end





%% Subs:

% Recursive function to process files
function [sum_of_signals, file_counter]= processFilesToSignals(dirPath, obj_type, ch_nums, seg_len, sample_rate, file_counter, sum_of_signals)
    % Get a structure array containing information about the files
    files = dir(dirPath);
    % Iterate over each file in the directory
    for i = 1:numel(files)
        % Obtain the file name
        filename = files(i).name;

        % Exclude "." and ".." entries
        if strcmp(filename, '.') || strcmp(filename, '..')
            continue;
        end
        
        % Construct the full file path
        filePath = fullfile(dirPath, filename);
        
        % Check if the item is a file (excluding directories)
        if files(i).isdir == 0 && contains(filename, obj_type)

            % Perform the desired operations on the file
            data = load(filePath);
            data = data.';
            [temp_signal, is_signal_good] = avg_with_channels(data, seg_len, sample_rate, ch_nums);

            if (is_signal_good)
                sum_of_signals = sum_of_signals + temp_signal;
            else
                file_counter = file_counter - 1;
            end
            
            % Display the file name (optional)
            disp(filePath);
            file_counter = file_counter + 1;
        else
            % Recursively process files in subdirectories
            [sum_of_signals, file_counter] = processFilesToSignals(filePath, obj_type, ch_nums, seg_len, sample_rate, file_counter, sum_of_signals);
        end
    end

end

%%
function [mean_signal, is_relevant] = avg_of_segments(signal, segment_len, sample_rate)

    numSegments = floor(length(signal)*sample_rate / segment_len);

    if (length(signal) == numSegments*segment_len/sample_rate)
        % Reshape the signal so that each segment is in a separate row
        reshaped_signal = reshape(signal, segment_len/sample_rate, numSegments);
        sum_signal = sum(reshaped_signal,2);
        mean_signal = sum_signal / numSegments;
        is_relevant = true;
    else
        mean_signal = zeros(segment_len/sample_rate);
        is_relevant = false;
    end
    
end
%%

function [mean_signal_channels, is_signal_good] = avg_with_channels(signal_w_all_channels, segment_len, sample_rate, channels)

    sum_of_mean_signals = zeros(segment_len/sample_rate);
    num_of_channels_used = length(channels);
    is_signal_good = true;
    for i = 1:numel(channels)
        % Access the current element using the loop index
        ch_num = channels(i);
        
        % Perform operations on the element
        signal_one_channel = signal_w_all_channels(:,ch_num);
        [mean_signal, is_relevant] = avg_of_segments(signal_one_channel, segment_len, sample_rate);
        if (is_relevant)
            sum_of_mean_signals = sum_of_mean_signals + mean_signal;
        else
            num_of_channels_used = num_of_channels_used - 1;
        end
    end
    
    if (num_of_channels_used > 0)
        mean_signal_channels = sum_of_mean_signals/length(channels);
    else
        is_signal_good = false;
        mean_signal_channels = zeros(segment_len/sample_rate);
    end

end

